name: Deploy

on:
  push:
    branches:
      - main

env:
  AWS_ACCOUNT_ID: 590184101838
  AWS_REGION: us-east-1
  AWS_APP: ticmetactoe-com
  AWS_ECS_CLUSTER: cluster
  NODE_VERSION: 16
  BUILD_DIR: public/
  CLOUDFLARE_ZONE: ce0ecdda6718cd2bde724be9a9e9ff02

jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache NPM
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install
        run: npm ci

  test: 
    needs: [install]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache NPM
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install
        run: npm ci
      - name: Install Playwright
        run: npm run e2e:install
      - name: Test App
        run: |
          npm run start:app &
          npm run e2e
        timeout-minutes: 5

  build-api:
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.AWS_APP }}-github-role
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: 'no'
      - id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: ${{ env.AWS_ACCOUNT_ID }}
          mask-password: "true"
      - uses: docker/setup-buildx-action@v3
      - id: docker
        shell: bash
        env: 
          IMAGE: "${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_APP }}:${{ github.sha }}"
        run: |
          docker buildx build --push --platform linux/arm64 -t "${{ env.IMAGE }}" .
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
    outputs:
      image: ${{ steps.docker.outputs.image }}

  deploy-api:
    needs: [build-api]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.AWS_APP }}-github-role
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: 'no'
      - run: |
          aws ecs describe-task-definition --task-definition "${{ env.AWS_APP }}" --query taskDefinition > task-definition.json
          cat task-definition.json
      - id: task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.AWS_APP }}
          image: ${{ needs.build-api.outputs.image }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-definition.outputs.task-definition }}
          service: ${{ env.AWS_APP }}
          cluster: ${{ env.AWS_ECS_CLUSTER }}
          wait-for-service-stability: false

  deploy-app:
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache NPM
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install
        run: npm ci
      - name: Build
        run: npm run build:app
        timeout-minutes: 5
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.AWS_APP }}-github-role
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: 'no'
      - name: Deploy Build
        run: |
          cd ${{ env.BUILD_DIR }}
          aws s3 cp . s3://${{ env.AWS_APP }} --recursive
      - name: Purge Cloudflare Cache
        run: |
          curl -fsSL "https://api.cloudflare.com/client/v4/zones/${{ env.CLOUDFLARE_ZONE }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything": true}' \
            --fail --show-error
        shell: bash
  